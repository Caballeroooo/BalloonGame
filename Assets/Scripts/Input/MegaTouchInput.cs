//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/MegaTapInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MegaTapInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MegaTapInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MegaTapInput"",
    ""maps"": [
        {
            ""name"": ""MegaTap"",
            ""id"": ""e7c92c2d-a9ae-4744-ba16-3cd4409b63af"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""407c9317-ecf6-4843-a5fc-2b72ba53cdba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""432e696b-c032-4139-b367-d4a595197f9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7001ba71-e9d4-4178-ba09-5358724762bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61b24c7d-6a26-46ec-800a-b6b14992653a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40492169-082b-415b-84a3-4f4c3ea4f0fa"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5f7287b-b91f-4d44-a9cc-ba7ce6d20447"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c32359ec-b012-4617-b5bd-fa11c96138ad"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcf69f64-120a-45ab-9a25-e83cad9d251f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""PressPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b65bac85-0eda-4522-90d9-96745f6d4229"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""PressPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MegaTap
        m_MegaTap = asset.FindActionMap("MegaTap", throwIfNotFound: true);
        m_MegaTap_Press = m_MegaTap.FindAction("Press", throwIfNotFound: true);
        m_MegaTap_Release = m_MegaTap.FindAction("Release", throwIfNotFound: true);
        m_MegaTap_PressPosition = m_MegaTap.FindAction("PressPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MegaTap
    private readonly InputActionMap m_MegaTap;
    private List<IMegaTapActions> m_MegaTapActionsCallbackInterfaces = new List<IMegaTapActions>();
    private readonly InputAction m_MegaTap_Press;
    private readonly InputAction m_MegaTap_Release;
    private readonly InputAction m_MegaTap_PressPosition;
    public struct MegaTapActions
    {
        private @MegaTapInput m_Wrapper;
        public MegaTapActions(@MegaTapInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_MegaTap_Press;
        public InputAction @Release => m_Wrapper.m_MegaTap_Release;
        public InputAction @PressPosition => m_Wrapper.m_MegaTap_PressPosition;
        public InputActionMap Get() { return m_Wrapper.m_MegaTap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MegaTapActions set) { return set.Get(); }
        public void AddCallbacks(IMegaTapActions instance)
        {
            if (instance == null || m_Wrapper.m_MegaTapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MegaTapActionsCallbackInterfaces.Add(instance);
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
            @PressPosition.started += instance.OnPressPosition;
            @PressPosition.performed += instance.OnPressPosition;
            @PressPosition.canceled += instance.OnPressPosition;
        }

        private void UnregisterCallbacks(IMegaTapActions instance)
        {
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
            @PressPosition.started -= instance.OnPressPosition;
            @PressPosition.performed -= instance.OnPressPosition;
            @PressPosition.canceled -= instance.OnPressPosition;
        }

        public void RemoveCallbacks(IMegaTapActions instance)
        {
            if (m_Wrapper.m_MegaTapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMegaTapActions instance)
        {
            foreach (var item in m_Wrapper.m_MegaTapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MegaTapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MegaTapActions @MegaTap => new MegaTapActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface IMegaTapActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnPressPosition(InputAction.CallbackContext context);
    }
}
